name: "Production: Release"

on:
  workflow_dispatch:
    inputs:
      versionbump:
        description: "Version Bump"
        type: choice
        required: true
        options:
          - "patch"
          - "minor"
          - "major"

env:
  DOCKERHUB_REPOSITORY: adiatma85/gg-project


jobs:
  release:
    timeout-minutes: 30
    runs-on: ubuntu-latest
  
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Setup Go environment
        uses: actions/setup-go@v3.3.1
        with:
          go-version: 1.21
          cache: true

      - name: Make secret file
        run: |
          echo '{
            "HOST": "${{ secrets.HOST }}",
            "PORT": "${{ secrets.PORT }}",
            "ENV_MODE": "${{ secrets.ENV_MODE }}",
            "DATABASE_HOST": "${{ secrets.DATABASE_HOST }}",
            "DATABASE_PORT": "${{ secrets.DATABASE_PORT }}",
            "DATABASE_USER": "${{ secrets.DATABASE_USER }}",
            "DATABASE_PASSWORD": "${{ secrets.DATABASE_PASSWORD }}",
            "DATABASE_DRIVER": "${{ secrets.DATABASE_DRIVER }}"
          }' >> secrets.json
        shell: bash

      - name: Render the secret with Template File
        run: |
          go install github.com/cbroglie/mustache/cmd/mustache@v1.4.0
          touch ./etc/cfg/conf.json
          mustache --layout ./etc/tpl/conf.template.json secrets.json ./etc/cfg/conf.json >> ./etc/cfg/conf.json
          rm secrets.json
      
      - name: Build Go App for Docker
        id: build
        run: |
          make prepare
          make build-alpine
      
      - name: Get Latest Tag
        id: latest-tag
        run: |
          git config --global --add safe.directory /github/workspace
          echo "tag=$(git tag -l | grep -v -E '^.*-hotfix\..*$' | sed '/-/!{s/$/_/;}' \
            | sort -V | sed 's/_$//' | tail -1)" >> "$GITHUB_OUTPUT"

      - name: Check Prerelease Version
        run: |
          if ! [[ ${{ steps.latest-tag.outputs.tag }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+\-rc\.[0-9]+$ ]]; then
            echo "Invalid Prerelease Version"
            exit 1
          fi
      
      - name: Generate New Bumped Version
        uses: DelosAqua/action-bump-semver@v1.1.0
        id: bump-semver
        with:
          current_version: ${{ steps.latest-tag.outputs.tag }}
          level: ${{ github.event.inputs.versionbump }}

      - name: Check Semver Format
        run: ./utils/semver -v ${{ steps.bump-semver.outputs.new_version }}
      
      - name: Build and push Docker image
        env:
          DOCKER_IMAGE: ${{ env.DOCKERHUB_REPOSITORY }}:${{ steps.bump-semver.outputs.new_version }}
        run: |
          docker buildx create --use
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker buildx build . -f ./utils/Dockerfile -t ${{ env.DOCKER_IMAGE }} \
            --build-arg SERVICE_VERSION=${{ steps.bump-semver.outputs.new_version }} \
            --provenance false --push

      - name: Create Release Notes
        id: create-release
        run: |
          curl -f -X POST -H "Accept: application/vnd.github.v3+json" \
            -H "authorization: Bearer ${{ secrets.TOKEN_GITHUB }}" \
            https://api.github.com/repos/${{ github.repository }}/releases \
            -d '{"tag_name":"${{ steps.bump-semver.outputs.new_version }}", "prerelease":true, "generate_release_notes":true}'
      
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        uses: Ilshidur/action-discord@master
        with:
          args: 'The project {{ EVENT_PAYLOAD.repository.full_name }} has been built.'